// Copyright 2023-2025 KIT ELN Reaction Database Authors
// Nicole Jung <nicole.jung@kit.edu>, Christian Buggle <christian@buggle.net>
//
// Ord::Kit for KIT IOC
// (Karlsruhe Institute of Technology / Institute for Organical Chemistry).
// Schema for the KIT ELN Reaction Database,
// allowing to store data describing the process of a chemical reaction
// (loosely based on the original ORD Schema).
//
// v0.8.0
// (draft, 18.01.2025)
//
//
// Copyright 2020 Open Reaction Database Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package ord_kit;

/**
 * Throughout this schema, we introduce enums to encourage consistency in
 * nomenclature and to avoid unnecessary downstream data processing that would
 * otherwise be required to consolidate equivalent entries. However, we do
 * not wish to restrict what users are able to specify if their synthesis
 * does not fit cleanly into a pre-existing enum field. For that reason, many
 * enums contain a CUSTOM field, which must be accompanied by setting the
 * 'details' field, where appropriate).
 *
 * NOTE(kearnes): In many places, we deliberately violate the style guide for
 * enums by nesting instead of prefixing; this is not done lightly. The primary
 * consideration is API consistency and the ability to use unqualified strings
 * as enum values. For instance, we want 'CUSTOM' to be a valid value for all
 * enums that support custom types.
 */
message Reaction {
  string reaction_id = 1;
  ReactionProvenance provenance = 2;
  ReactionConditions conditions = 3;
  repeated ReactionStep reaction_steps = 4;
}

/**
 * Each ReactionStep
 * describes an atomar reaction (in a vessel) and is made of atomar
 * Actions.
 **/

message ReactionStep {
  // Unique UUID for this reaction step.
  string reaction_step_id = 1;
  // The position of this step within the Reaction
  int32 position = 2;
  // The start_time (in seconds) in the total reaction.
  TimeSpan start_time = 3;
  // The total duration.
  TimeSpan duration = 4;
  // The setup specifies how the reaction step was prepared.
  // Most importantly it contains the Vessel.
  ReactionSetup setup = 5;
  // The indivdual actions defining the ReactionStep.
  repeated ReactionProcessAction actions = 6;

  StepAutomationStatus step_automation_status = 7;
}

/**
 * An Ontology is a reference to a CHMO or a genericly defined Ontology
 *
 **/

message Ontology {
  string id = 1;
  string label = 2;
  string name = 3;
}

/**
 * A reaction input is any pure substance, mixture, or solution that is
 * added to the reaction vessel.
 *
 * For example, suppose we are adding 3 mL of a 4 M solution of NaOH in water.
 * We would define one component for the solvent and one component for the
 * solute with the correct respective amounts.
 *
 * input {
 *   components: {
 *     identifiers: {type: IDENTIFIER_SMILES, value: "O"}
 *     identifiers: {type: IDENTIFIER_NAME, value: "water"}
 *     volume: {value: 3, units: MILLILITER}
 *     volume_includes_solutes: true
 *   }
 *   components: {
 *     identifiers: {type: IDENTIFIER_SMILES, value: "[Na+].[OH-]"}
 *     identifiers: {type: IDENTIFIER_NAME, value: "sodium hydroxide"}
 *     moles: {value: 12, units: MILLIMOLES}
 *   }
 * }
 */
message ReactionInput {
  // A component is any pure species that is added to the reaction, whether as
  // a pure substance or in a mixture/solution.
  repeated Compound components = 1;
  // The addition order is 1-indexed. Inputs with the same addition_order are
  // assumed to be added simultaneously. One input with a lower addition_order
  // than another was added earlier in the procedure.
  int32 addition_order = 3;
  // When the addition event took place in terms of the reaction time (or,
  // in the case of flow chemistry, the residence time).
  TimeSpan addition_time = 4;
  message AdditionSpeed {
    enum AdditionSpeedType {
      // Unspecified.
      UNSPECIFIED = 0;
      ALL_AT_ONCE = 1;
      FAST = 2;
      SLOW = 3;
      DROPWISE = 4;
      CONTINUOUS = 5;
      PORTIONWISE = 6;
      FLOW_RATE = 7;
    }
    AdditionSpeedType type = 1;
    // Specify, e.g., portion sizes and intervals for PORTIONWISE.

    string details = 2;
  }
  // The qualitative rate of addition.
  AdditionSpeed addition_speed = 5;
  // Quantitatively, how long addition took
  TimeSpan addition_duration = 6;
  // For continuous synthesis, we instead specify a flow rate.
  FlowRate flow_rate = 7;
  // The device used for addition.
  Equipment addition_device = 8;
  // Specify the temperature of the material being added.
  // E.g., a cooled flask of a stock solution to be added at low temperature.
  ReactionConditions conditions = 9;
}

enum AutomationStatus {
  UNSPECIFIED = 0;
  RUN = 1;
  HALT = 2;
  AUTOMATION_RESPONDED = 3;
  HALT_RESOLVED_NEEDS_CONFIRMATION = 4;
  HALT_RESOLVED = 5;
  COMPLETED = 6;
}

enum StepAutomationStatus {
  STEP_STATUS_UNSPECIFIED = 0;
  STEP_CAN_RUN = 1;
  STEP_HALT_BY_PRECEDING = 2;
  STEP_MANUAL_PROCEED = 3;
  STEP_COMPLETED = 4;
}

/**
 * An individual Action defining the reaction workflow.
 * It is usually referenced within a ReactionStep.
 *
 */
message ReactionProcessAction {
  string id = 1;
  string description = 2;
  int32 position = 3;
  TimeSpan start_time = 4;
  TimeSpan duration = 5;
  repeated Equipment equipment = 6;
  optional VesselTemplate vessel_template = 7;
  oneof action {
    ActionAdd addition = 8;
    ActionRemove removal = 9;
    ReactionConditions conditions = 10;
    ActionPurification purification = 11;
    ActionAnalysis analysis = 12;
    ActionTransfer transfer = 13;
    ActionWait wait = 14;
    ActionSaveSample save_sample = 15;
    ActionDiscard discard = 16;
    ActionEvaporation evaporation = 17;
  }
  optional AutomationStatus automation_status = 18;
  repeated string fractions = 19;

  message ActionAdd {
    ReactionRole.ReactionRoleType reaction_role = 1;
    ReactionInput input = 2;
  }

  message ActionRemove {
    message DiverseSolvents {
      repeated CompoundWithRatio solvents = 1;
      Amount solvents_amount = 2;
    }
    message FromReaction {
      repeated Compound samples = 1;
      Amount amount = 2;
      repeated CompoundWithRatio solvents = 3;
      Amount solvents_amount = 4;
    }
    message FromMethod {
      ReactionConditions starter_conditions = 1;
      repeated ReactionConditionLimits limits = 2;
    }

    Automation.AutomationMode automation_mode = 1;
    oneof origin {
      FromReaction from_reaction = 2;
      FromReaction from_reaction_step = 3;
      FromReaction from_sample = 4;
      FromMethod from_method = 5;
      FromMethod stepwise = 7;
      DiverseSolvents diverse_solvents = 6;
    }
  }

  message ActionPurificationCrystallization {
    enum CrystallizationMode {
      UNSPECIFIED = 0;
      NONE = 1;
      COLD = 2;
      HOT = 3;
    }

    repeated CompoundWithRatio solvents = 1;
    Amount amount = 2;
    Temperature temperature = 3;
    TimeSpan heating_duration = 4;
    TimeSpan cooling_duration = 5;
    CrystallizationMode crystallization_mode = 6;
  }

  message ActionPurificationChromatography {
    message ChromatographyStep {
      enum Step {
        STEP_UNSPECIFIED = 0;
        EQUILIBRIUM = 1;
        SEPARATION = 2;
        AFTER_RUN = 3;
      }
      enum Prod {
        PROD_UNSPECIFIED = 0;
        ANY = 1;
        PROD = 2;
        NONE = 3;
      }

      TimeSpan duration = 1;
      repeated OntologySolventWithRatio solvents = 2;
      Amount amount = 3;
      FlowRate flow_rate = 4;
      Step step = 5;
      Prod prod = 6;
    }

    Ontology automation_mode = 1;
    Ontology type = 2;
    Ontology subtype = 3;
    optional Ontology device = 4;
    repeated Ontology detectors = 6;
    repeated Ontology mobile_phase = 7;
    optional string method = 8;
    string stationary_phase = 9;
    TemperatureConditions stationary_phase_temperature = 10;
    Volume volume = 11;

    optional Ontology material = 12;
    optional Length diameter = 13;
    optional Length height = 14;
    optional Length filling_height = 15;

    repeated ChromatographyStep steps = 16;
  }

  message ActionPurificationExtraction {
    message ExtractionStep {
      TimeSpan duration = 1;
      repeated CompoundWithRatio solvents = 2;
      Amount amount = 3;
      FlowRate flow_rate = 4;
    }
    enum ExtractionPhase {
      UNSPECIFIED = 0;
      AQUEOUS = 1;
      ORGANIC = 2;
    }

    Automation.AutomationMode automation_mode = 1;
    ExtractionPhase phase = 2;
    repeated ExtractionStep steps = 3;
  }

  message ActionPurificationFiltration {
    enum FiltrationMode {
      UNSPECIFIED = 0;
      KEEP_SUPERNATANT = 1;
      KEEP_PRECIPITATE = 2;
    }
    message FiltrationStep {
      TimeSpan duration = 1;
      repeated CompoundWithRatio solvents = 2;
      Amount amount = 3;
      FlowRate flow_rate = 4;
      int32 repetitions = 5;
      bool rinse_vessel = 6;
    }
    FiltrationMode filtration_mode = 1;
    repeated FiltrationStep steps = 2;
    Automation.AutomationMode automation_mode = 5;
  }

  message ActionPurification {
    oneof type {
      ActionPurificationFiltration filtration = 1;
      ActionPurificationExtraction extraction = 2;
      ActionPurificationCrystallization crystallization = 3;
      ActionPurificationChromatography chromatography = 4;
    }
  }

  message ActionSpectroscopy {
    Automation.AutomationMode automation_mode = 1;
    string device = 2;
  }

  message ActionSpectrometry {
    Automation.AutomationMode automation_mode = 1;
    string device = 2;
  }

  message ActionAnalysis {
    oneof type {
      ActionSpectroscopy spectroscopy = 1;
      ActionSpectrometry spectrometry = 2;
      ActionPurificationChromatography chromatography = 3; // for now identical, ActionAnalysisChr. might diverge soon.
    }
  }

  message ActionTransfer {
    ReactionRole.ReactionRoleType reaction_role = 1;
    ReactionInput input = 2;
    string transfer_source_reaction_step_id = 3;
    string transfer_target_reaction_step_id = 4;
    Amount amount = 5;
    Percentage percentage = 6;
  }

  message ActionDiscard { repeated string fractions = 1; }
  message ActionEvaporation { repeated string fractions = 1; }
  message ActionWait { TimeSpan duration = 1; }

  message ActionSaveSample {
    enum OriginType {
      UNSPECIFIED = 0;
      ALL = 1;
      SPLIT = 2;
      PURIFICATION = 3;
    }

    message PurificationOrigin {
      string origin_action_id = 1;
      int32 origin_purification_step_position = 2;
      repeated Compound solvents = 3;
      Amount amount = 4;
      repeated Compound extra_solvents = 5;
    }

    Compound sample = 1;
    repeated Compound molecular_entities = 2;
    OriginType sample_origin_type = 4;
    optional PurificationOrigin purification_origin = 5;
  }
}

/**
 * The quantitative amount of a Compound used in a particular reaction.
 * Compounds added in their pure form should have their value defined by
 * mass, moles, or volume. Compounds prepared as solutions should be defined
 * in terms of their volume. Compounds prepared on solid supports should
 * define the total mass/volume including the support.
 */
message Amount {
  oneof kind {
    Mass mass = 1;
    Moles moles = 2;
    Volume volume = 3;
    Percentage percentage = 4;
  }
}

/**
 * A Compound defines both the identity of a pure species and a quantitative
 * amount (mass, moles, volume). For compounds used in inputs, details can
 * be provided about how it was prepared and from where it was purchased.
 */
message Compound {
  // Set of identifiers used to uniquely define this compound.
  // Solutions or mixed compounds should use the NAME identifier
  // and list all constituent compounds in the "components" field.
  repeated CompoundIdentifier identifiers = 1;
  Amount amount = 2;
  optional Percentage percentage = 3;
  ReactionRole.ReactionRoleType reaction_role = 4;
  repeated CompoundPreparation preparations = 5;

  // The purity of the compound.
  Percentage purity = 6;

  // Optional flag when adding solvents.
  optional bool is_waterfree_solvent = 10;

  string location = 11;
}

message CompoundWithRatio {
  Compound compound = 1;
  string ratio = 2;
}

message OntologySolventWithRatio {
  Ontology solvent = 1;
  string ratio = 2;
}

message ReactionRole {
  enum ReactionRoleType {
    UNSPECIFIED = 0;
    // A reactant is any compound that contributes atoms to a desired or
    // observed product.
    REACTANT = 1;
    REAGENT = 2;
    SOLVENT = 3;
    CATALYST = 4;
    // The workup role is used when defining quenches, buffer additives for
    // liquid-liquid separations, etc.
    WORKUP = 5;
    // Internal standards can be included as part of a reaction input (when
    // added prior to the start of the reaction) or as part of a workup
    // step of addition.
    INTERNAL_STANDARD = 6;
    AUTHENTIC_STANDARD = 7;
    // A product can be any species produced by the reaction, whether desired
    // or undesired.
    PRODUCT = 8;

    // KIT Enhancements
    SAMPLE = 9;
    DIVERSE_SOLVENT = 10;
    ADDITIVE = 11;
    MEDIUM = 12;
    CRUDE = 13;
    INTERMEDIATE = 14;
    MIXTURE = 15;
    PURE = 16;
  }
}

/**
 * Compounds may undergo additional preparation before being used in a
 * reaction after being received from a supplier or vendor. We encourage
 * the use of the 'preparation' enum when possible, even if the description
 * is an oversimplification of the full procedure, which can be described
 * in the 'details' field.
 */
message CompoundPreparation {
  enum PreparationType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    NONE = 2;       // Compound used as received.
    REPURIFIED = 3; // Compound repurified (e.g., recrystallized).
    SPARGED = 4; // Compound sparged, most likely to be the case with solvents.
    DRIED = 5;   // Moisture removed, e.g., using molecular sieves.
    SYNTHESIZED = 6; // Compound synthesized in-house.
    DISSOLVED = 7;
    HOMOGENIZED = 8;
    TEMPERATURE_ADJUSTED = 9;
    DEGASSED = 10;
  }
  repeated PreparationType type = 1;
  // Full description of how the received compound was prepared.
  string details = 2;
  repeated Equipment equipment = 4;
}

/**
 * Compound identifiers uniquely define a single (pure) chemical species.
 * While we encourage the use of SMILES strings, these do not work well in
 * all cases (e.g., handling tautomerism, axial chirality). Multiple
 * identifiers may be specified for a single compound to avoid ambiguity.
 * We discourage chemicals from being defined only by a name. For compounds
 * that are prepared or isolated as salts, the identifier should include
 * specification of which salt.
 */
message CompoundIdentifier {
  enum IdentifierType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    // Simplified molecular-input line-entry system.
    SMILES = 2;
    // IUPAC International Chemical Identifier.
    INCHI = 3;
    // Molblock from a MDL Molfile V3000.
    MOLBLOCK = 4;
    // Chemical name following IUPAC nomenclature recommendations.
    IUPAC_NAME = 5;
    // Any accepted common name, trade name, etc.
    NAME = 6;
    // Chemical Abstracts Service Registry Number (with hyphens).
    CAS_NUMBER = 7;
    // PubChem Compound ID number.
    PUBCHEM_CID = 8;
    // ChemSpider ID number.
    CHEMSPIDER_ID = 9;
    // ChemAxon extended SMILES
    CXSMILES = 10;
    // IUPAC International Chemical Identifier key
    INCHI_KEY = 11;
    // XYZ molecule file
    XYZ = 12;
    // UniProt ID (for enzymes)
    UNIPROT_ID = 13;
    // Protein data bank ID (for enzymes)
    PDB_ID = 14;
    // Amino acid sequence (for enzymes).
    AMINO_ACID_SEQUENCE = 15;
    // HELM; https://www.pistoiaalliance.org/helm-notation/.
    HELM = 16;
  }
  IdentifierType type = 1;
  string details = 2;
  // Value of the compound identifier; certain types (e.g., PUBCHEM_CID) may
  // cast the string as an integer for downstream processing and validation.
  string value = 3;
}

/**
 * The VesVesselTemplatesel defines the primary container within which the reaction was
 * performed, including the type of vessel, its primary material, any
 * preparation steps or vessel attachments, and its volume.
 */
message VesselTemplate {
  enum VesselType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    ROUND_BOTTOM_FLASK = 2;
    VIAL = 3;
    WELL_PLATE = 4;
    MICROWAVE_VIAL = 5;
    TUBE = 6;
    CONTINUOUS_STIRRED_TANK_REACTOR = 7;
    PACKED_BED_REACTOR = 8;
    NMR_TUBE = 9;
    PRESSURE_FLASK = 10;   // E.g., sealed tube
    PRESSURE_REACTOR = 11; // High-pressure (e.g., Parr bomb reactor)
    ELECTROCHEMICAL_CELL = 12;
    SCHLENK_FLASK = 13;
    SCHLENK_TUBE = 14;
    MULTINECK_FLASK = 15;
    COIL = 16;
    CUVETTE = 17;
    BEAKER = 18;
    ERLENMEYER_FLASK = 19;
  }
  string id = 1;
  string name = 2;

  string details = 3;

  VesselType type = 4;
  // Vessel material (glass, plastic, etc.).
  Material material = 5;
  // Size (volume) of the vessel.
  Volume volume = 6;
  // Weight (mass) of the vessel.
  // How the vessel was prepared for the reaction.
  repeated VesselPreparation preparations = 7;
  // Vessel attachments (septum, cap, gas adapter, etc.).
  repeated VesselAttachment attachments = 8;

  optional Vessel vessel = 9;
}

message Vessel {
  string id = 1;
  string label = 2;
  string description = 3;
  string bar_code = 4;
  string qr_code = 5;
  Mass weight = 6;
}

message Material {
  enum MaterialType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    GLASS = 2;
    POLYPROPYLENE = 3;
    PLASTIC = 4;
    METAL = 5;
    QUARTZ = 6;
    BROWN_GLASS = 7;
    PFA = 8;
    PTFE = 9;
    BOROSILICATE_GLASS = 10;
    POLYMETHLYPENTENE = 11;
    POLYETHYLENE = 12;
  }
  MaterialType type = 1;
  string details = 2;
}

message Equipment {
  enum EquipmentType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    NONE = 2;
    SYRINGE = 3;
    CANNULA = 4;
    ADDITION_FUNNEL = 5;
    SPATULA = 6;
    PIPE = 7;
    PIPET = 8;
    FLASK = 9;
    DOSING_STATION = 10;
    LIQUID_HANDLING_SYSTEM = 11;
    SYRINGE_AND_SYRINGE_PUMP = 12;
    HEATING_MANTLE = 13;
    BLOW_DRYER = 14;
    OIL_BATH = 15;
    ICE_BATH = 16;
    ALUMINIUM_BLOCK = 17;
    WATER_BATH = 18;
    SAND_BATH = 19;
    REACTOR = 20;
    ULTRA_SOUND_BATH = 21;
    UV_LAMP = 22;
    LED = 23;
    STIRRER = 24;
    SHAKER = 25;
    HEATING_SHAKER = 26;
    TUBE = 27;
    BALL_MILLING = 28;
    PUMP = 29;
    COIL = 30;
    FILTER = 31;
    SEPARATION_FUNNEL = 32;
    EXTRACTOR = 33;
    SPE_COLUMN = 34;
    FSPE_COLUMN = 35;
    FLASH_COLUMN = 36;
    DISTILLATION_APPARATUS = 37;
    DROPPING_FUNNEL = 38;
    BUCHNER_FUNNEL = 39;
    MICROWAVE_REACTOR = 40;
    FUNNEL = 41;
    WATER_COOLER = 42;
    SEPARATION_FILTER = 43;
  }
  EquipmentType type = 1;
  string details = 2;
}

message VesselAttachment {
  enum VesselAttachmentType {
    UNSPECIFIED = 0;
    NONE = 1;
    CUSTOM = 2;
    SEPTUM = 3;
    CAP = 4;
    MAT = 5;
    REFLUX_CONDENSER = 6;
    VENT_NEEDLE = 7;
    DEAN_STARK = 8;
    VACUUM_TUBE = 9;
    ADDITION_FUNNEL = 10;
    DRYING_TUBE = 11;
    ALUMINUM_FOIL = 12;
    THERMOCOUPLE = 13;
    BALLOON = 14;
    GAS_ADAPTER = 15;
    PRESSURE_REGULATOR = 16;
    RELEASE_VALVE = 17;
    STIRRING_BAR = 18;
    CANNULA = 19;
    FINDENSER = 20;
    PRESSURE_CAPS_VIALS = 21;
    TUBE = 22;
    STOPPER = 23;
    METAL_REFLUX_CONDENSER = 24;
    SOXHLET_EXTRACTOR = 25;
    OVERHEAD_STIRRER = 26;
    FUNNEL = 27;
    DROPPING_FUNNEL = 28;
    SEPARATION_FUNNEL = 29;
    HYDRATION_APPARATUS = 30;
  }
  VesselAttachmentType type = 1;
  string details = 2;
}

message VesselPreparation {
  enum VesselPreparationType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    NONE = 2;
    OVEN_DRIED = 3;
    FLAME_DRIED = 4;
    EVACUATED_BACKFILLED = 5;
    PURGED = 6;
  }
  VesselPreparationType type = 1;
  string details = 2;
  string medium = 3;
}

message ReactionSetup {
  optional VesselTemplate vessel_template = 1;

  message ReactionEnvironment {
    enum ReactionEnvironmentType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      FUME_HOOD = 2;
      BENCH_TOP = 3;
      GLOVE_BOX = 4;
      GLOVE_BAG = 5;
    }
    ReactionEnvironmentType type = 1;
    // Specify environment details, e.g., "nitrogen-filled" for GLOVE_BOX.
    string details = 2;
  }
  // Specify reaction environment.
  ReactionEnvironment environment = 5;
}

message ReactionConditions {
  TemperatureConditions temperature = 1;
  PressureConditions pressure = 2;
  StirringConditions stirring = 3;
  IlluminationConditions illumination = 4;
  ElectrochemistryConditions electrochemistry = 5;
  FlowConditions flow = 6;
  optional bool reflux = 7;
  PhAdjustConditions ph = 8;
  WavelengthRange wavelengths = 9;
  repeated GenericConditions generic = 10;
  // A catch-all string field for providing more information about
  // the conditions (e.g., multiple stages)
  string details = 11;
}

message GenericConditions {
  string name = 1;
  string conditions = 2;
}

message ReactionConditionLimits {
  ReactionConditions conditions = 1;
  TimeSpan duration = 2;
}

message PhAdjustConditions {
  enum PhAdjustMeasurementType {
    UNSPECIFIED = 0;
    ELECTRODE = 1;
    STRIPE = 2;
    OTHER = 3;
  }

  PhAdjustMeasurementType measurement_type = 1;
  double value = 2;
}

message TemperatureConditions {
  message TemperatureControl {
    enum TemperatureControlType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AMBIENT = 2;
      OIL_BATH = 3;
      WATER_BATH = 4;
      SAND_BATH = 5;
      ICE_BATH = 6;
      DRY_ALUMINUM_PLATE = 7;
      MICROWAVE = 8;
      DRY_ICE_BATH = 9;
      AIR_FAN = 10;
      LIQUID_NITROGEN = 11;
      MEASUREMENT_IN_REACTION = 12;
      CONTACT_MEDIUM = 13;
    }
    TemperatureControlType type = 1;
    // Specify, e.g., ICE_BATH components (e.g., "ice water, salt"),
    // MICROWAVE power, AIR_FAN speed, etc.
    string details = 2;
  }
  TemperatureControl control = 1;
  Temperature setpoint = 2;
  message Measurement {
    enum MeasurementType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      THERMOCOUPLE_INTERNAL = 2; // Physically in reaction solution.
      THERMOCOUPLE_EXTERNAL = 3; // On outside of vessel or, e.g., in oil bath.
      INFRARED = 4;              // Contactless infrared probe.
    }
    MeasurementType type = 1;
    string details = 2;
    TimeSpan time = 3;
    Temperature temperature = 4;
  }
  repeated Measurement measurements = 3;
}

message PressureConditions {
  message PressureControl {
    enum PressureControlType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AMBIENT = 2;
      SLIGHT_POSITIVE = 3; // E.g., 1-5 psi with a gas line inlet.
      SEALED = 4; // Fully sealed vessel (e.g., microwave vial, sealed tube).
      PRESSURIZED = 5; // High-pressure applied, e.g., in a bomb reactor.
    }
    PressureControlType type = 1;
    // Include means of pressure control in "Attachment" when appropriate.
    string details = 2;
  }
  PressureControl control = 1;
  Pressure setpoint = 2;
  message Atmosphere {
    enum AtmosphereType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      AIR = 2;
      NITROGEN = 3;
      ARGON = 4;
      OXYGEN = 5;
      HYDROGEN = 6;
      CARBON_MONOXIDE = 7;
      CARBON_DIOXIDE = 8;
      METHANE = 9;
      AMMONIA = 10;
      OZONE = 11;
      ETHYLENE = 12;
      ACETYLENE = 13;
    }
    AtmosphereType type = 1;
    string details = 2;
  }
  Atmosphere atmosphere = 3;
  message Measurement {
    enum MeasurementType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      PRESSURE_TRANSDUCER = 2;
    }
    MeasurementType type = 1;
    string details = 2;
    TimeSpan time = 3;
    Pressure pressure = 4;
  }
  repeated Measurement measurements = 4;
}

message StirringConditions {
  enum StirringMethodType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    NONE = 2;
    STIR_BAR = 3;
    OVERHEAD_MIXER = 4;
    AGITATION = 5;
    BALL_MILLING = 6;
    SONICATION = 7;
    OTHER = 8;
  }

  message StirringRate {
    enum StirringRateType {
      UNSPECIFIED = 0;
      HIGH = 1;
      MEDIUM = 2;
      LOW = 3;
    }
    StirringRateType type = 1;
    string details = 2;
    int32 rpm = 3;
  }
  StirringMethodType type = 1;
  string details = 2;
  StirringRate rate = 3;

  Automation.AutomationMode automation_mode = 4;
}

message IlluminationConditions {
  enum IlluminationType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    AMBIENT = 2;
    DARK = 3;
    LED = 4;
    HALOGEN_LAMP = 5;
    DEUTERIUM_LAMP = 6;
    SOLAR_SIMULATOR = 7;
    BROAD_SPECTRUM = 8;
    LAMP = 9;
    LASER = 10;
    MICROWAVE_REACTOR = 11;
  }
  IlluminationType type = 1;
  string details = 2; // E.g. manufacturer, setup specifications, etc.
  Wavelength peak_wavelength = 3;
  string color = 4;
  Length distance_to_vessel = 5;
  Power power = 6;
  optional bool power_is_ramp = 7;
  optional Power power_end = 8;
}

message ElectrochemistryConditions {
  enum ElectrochemistryType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    CONSTANT_CURRENT = 2;
    CONSTANT_VOLTAGE = 3;
  }
  ElectrochemistryType type = 1;
  string details = 2;
  Current current = 3;
  Voltage voltage = 4;
  string anode_material = 5;
  string cathode_material = 6;
  Length electrode_separation = 7;
  message Measurement {
    TimeSpan time = 1;
    oneof kind {
      Current current = 2;
      Voltage voltage = 3;
    }
  }
  repeated Measurement measurements = 8;
  message ElectrochemistryCell {
    enum ElectrochemistryCellType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      DIVIDED_CELL = 2;
      UNDIVIDED_CELL = 3;
    }
    ElectrochemistryCellType type = 1;
    string details = 2;
  }
  ElectrochemistryCell cell = 9;
}

message FlowConditions {
  enum FlowType {
    UNSPECIFIED = 0;
    CUSTOM = 1;
    PLUG_FLOW_REACTOR = 2;
    CONTINUOUS_STIRRED_TANK_REACTOR = 3;
    PACKED_BED_REACTOR = 4;
  }
  FlowType type = 1;
  string details = 2;
  string pump_type = 3;
  message Tubing {
    enum TubingType {
      UNSPECIFIED = 0;
      CUSTOM = 1;
      STEEL = 2;
      COPPER = 3;
      PFA = 4;
      FEP = 5;
      TEFLONAF = 6;
      PTFE = 7;
      GLASS = 8;
      QUARTZ = 9;
      SILICON = 10; // e.g., a chip-based microreactor
      PDMS = 11;
    }
    TubingType type = 1;
    string details = 2;
    Length diameter = 3;
  }
  Tubing tubing = 4;
}

message DateTime { string value = 1; }

message ReactionProvenance {
  Person experimenter = 1;
  string city = 2;
  DateTime experiment_start = 3;
  string doi = 4;
  string patent = 5;
  string publication_url = 6;
  RecordEvent record_created = 7;
  repeated RecordEvent record_modified = 8;
}

message Person {
  string username = 1;
  string name = 2;
  string orcid = 3;
  string organization = 4;
  string email = 5;
}

message RecordEvent {
  DateTime time = 1;
  Person person = 2;
  string details = 3;
}

/**
 * To allow users to describe synthetic processes in whatever units they find
 * most natural, we define a fixed list of allowable units for each measurement
 * type. Upon submission to a centralized database, or using a validation and
 * canonicalization script, we will convert all values to the default units
 * (the first nonzero item in each enum).
 *
 * Each message also contains a `precision` field, which specifies the precision
 * of the measurement in the same units as the measurement itself. Often the
 * precision will be the standard deviation from an instrument calibration.
 */
message TimeSpan {
  enum TimeUnit {
    UNSPECIFIED = 0;
    SECOND = 1;
    MINUTE = 2;
    HOUR = 3;
    DAY = 4;
  }
  optional float value = 1;
  optional float precision = 2;
  TimeUnit unit = 3;
}
message Mass {
  enum MassUnit {
    UNSPECIFIED = 0;
    KILOGRAM = 1;
    GRAM = 2;
    MILLIGRAM = 3;
    MICROGRAM = 4;
  }
  optional double value = 1;
  optional double precision = 2;
  MassUnit unit = 3;
}
message Moles {
  enum MolesUnit {
    UNSPECIFIED = 0;
    MOLE = 1;
    MILLIMOLE = 2;
    MICROMOLE = 3;
    NANOMOLE = 4;
  }
  optional double value = 1;
  optional double precision = 2;
  MolesUnit unit = 3;
}
message Volume {
  enum VolumeUnit {
    UNSPECIFIED = 0;
    LITER = 1;
    MILLILITER = 2;
    MICROLITER = 3;
    NANOLITER = 4;
  }
  optional double value = 1;
  optional double precision = 2;
  VolumeUnit unit = 3;
}
message Concentration {
  enum ConcentrationUnit {
    UNSPECIFIED = 0;
    MOLAR = 1;
    MILLIMOLAR = 2;
    MICROMOLAR = 3;
  }
  optional double value = 1;
  optional double precision = 2;
  ConcentrationUnit unit = 3;
}
message Pressure {
  enum PressureUnit {
    UNSPECIFIED = 0;
    BAR = 1;
    ATMOSPHERE = 2;
    PSI = 3;
    KPSI = 4;
    PASCAL = 5;
    KILOPASCAL = 6;
    TORR = 7;
    MM_HG = 8;
    MBAR = 9;
  }
  optional double value = 1;
  optional double precision = 2;
  PressureUnit unit = 3;
}
message Temperature {
  enum TemperatureUnit {
    UNSPECIFIED = 0;
    CELSIUS = 1;
    FAHRENHEIT = 2;
    KELVIN = 3;
  }
  optional double value = 1;
  optional double precision = 2;
  TemperatureUnit unit = 3;
}
message Current {
  enum CurrentUnit {
    UNSPECIFIED = 0;
    AMPERE = 1;
    MILLIAMPERE = 2;
  }
  optional double value = 1;
  optional double precision = 2;
  CurrentUnit unit = 3;
}
message Power {
  enum PowerUnit {
    UNSPECIFIED = 0;
    WATT = 1;
    MILLIWATT = 2;
  }
  optional double value = 1;
  optional double precision = 2;
  PowerUnit unit = 3;
}
message Voltage {
  enum VoltageUnit {
    UNSPECIFIED = 0;
    VOLT = 1;
    MILLIVOLT = 2;
  }
  optional double value = 1;
  optional double precision = 2;
  VoltageUnit unit = 3;
}
message Length {
  enum LengthUnit {
    UNSPECIFIED = 0;
    CENTIMETER = 1;
    MILLIMETER = 2;
    METER = 3;
    INCH = 4;
    FOOT = 5;
  }
  optional double value = 1;
  optional double precision = 2;
  LengthUnit unit = 3;
}
message WavelengthRange {
  repeated Wavelength peaks = 1;
  bool is_range = 2;
}
message Wavelength {
  enum WavelengthUnit {
    UNSPECIFIED = 0;
    NANOMETER = 1;
    WAVENUMBER = 2; // cm^{-1}
  }
  optional double value = 1;
  optional double precision = 2;
  WavelengthUnit unit = 3;
}
message FlowRate {
  enum FlowRateUnit {
    UNSPECIFIED = 0;
    MICROLITER_PER_MINUTE = 1;
    MICROLITER_PER_SECOND = 2;
    MILLILITER_PER_MINUTE = 3;
    MILLILITER_PER_SECOND = 4;
    MICROLITER_PER_HOUR = 5;
  }
  optional double value = 1;
  optional double precision = 2;
  FlowRateUnit unit = 3;
}
// Used for things like conversion and yield.
message Percentage {
  optional double value = 1;
  optional double precision = 2;
}
// Wrapper for floats to include a precision.
message FloatValue {
  optional double value = 1;
  optional double precision = 2;
}

// Data is a container for arbitrary data.
message Data {
  oneof kind {
    double double_value = 1;
    float float_value = 2;
    int32 integer_value = 3;
    bytes bytes_value = 4;
    string string_value = 5;
    string url = 6; // URL for data stored elsewhere.
  }
  // Description of these data (but avoid redundancy with map keys).
  string description = 7;
  // Description of the file format (if applicable); usually the file extension.
  // For example, 'png' or 'tiff' for images. If empty, we assume string data.
  string format = 8;
}

message Automation {
  enum AutomationMode {
    UNSPECIFIED = 0;
    MANUAL = 1;
    AUTOMATED = 2;
    SEMI_AUTOMATED = 3;
  }
}
