# frozen_string_literal: true

module Usecases
  module ReactionProcessEditor
    module ReactionProcessActivities
      class SaveIntermediate
        # rubocop:disable Metrics/AbcSize
        def self.execute!(activity:, workup:)
          sample = Sample.find_by(id: workup['sample_id']) || Sample.new(decoupled: true,
                                                                         creator: activity.creator,
                                                                         molecule: Molecule.find_or_create_dummy)

          sample.collections << (activity.reaction.collections - sample.collections)

          sample.hide_in_eln = workup['hide_in_eln']

          sample.short_label = workup['short_label'].presence&.strip
          sample.description = workup['description'].presence&.strip

          target_amount = ::ReactionProcessEditor::SampleAmountsConverter.to_eln(workup)

          sample.target_amount_value = target_amount[:value]
          sample.target_amount_unit =  target_amount[:unit]
          sample.metrics = target_amount[:metrics]

          sample.purity = workup.dig('purity', 'value').to_f
          sample.location = workup['location']

          sample.save!

          #  use autogenerated short_label to update name, external_label and keep workup in sync.

          sample.update!(name: workup['name'].presence&.strip || sample.short_label)
          sample.update!(external_label: sample.short_label)

          activity.workup['name'] = sample.name
          activity.workup['short_label'] = sample.short_label
          activity.workup['sample_id'] = sample.id

          ris = ReactionsIntermediateSample.find_or_create_by(
            reaction: activity.reaction,
            sample: sample,
            reaction_process_activity: activity,
          )
          ris.update!(intermediate_type: workup['intermediate_type'])
          sample
        end
        # rubocop:enable Metrics/AbcSize
      end
    end
  end
end
